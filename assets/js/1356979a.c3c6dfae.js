"use strict";(self.webpackChunkprog_2_web=self.webpackChunkprog_2_web||[]).push([[1982],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>k});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=o,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return t?n.createElement(k,i(i({ref:a},d),{},{components:t})):n.createElement(k,i({ref:a},d))}));function k(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[m]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9498:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const r={sidebar_label:"Introducci\xf3n a C#",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},i=void 0,l={unversionedId:"clases/introduccion/Apuntes/introduccion-c-sharp",id:"clases/introduccion/Apuntes/introduccion-c-sharp",title:"introduccion-c-sharp",description:"Introducci\xf3n a C",source:"@site/docs/clases/01-introduccion/Apuntes/03-introduccion-c-sharp.md",sourceDirName:"clases/01-introduccion/Apuntes",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",permalink:"/utn-prog-ii/docs/clases/introduccion/apuntes/introduccion-c-sharp",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/clases/01-introduccion/Apuntes/03-introduccion-c-sharp.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Introducci\xf3n a C#",slug:"/clases/introduccion/apuntes/introduccion-c-sharp",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Crear un proyecto de consola",permalink:"/utn-prog-ii/docs/clases/introduccion/apuntes/proyecto-consola"},next:{title:"Trabajando con la consola",permalink:"/utn-prog-ii/docs/clases/introduccion/apuntes/input-output"}},s={},p=[{value:"Introducci\xf3n a C#",id:"introducci\xf3n-a-c",level:2},{value:"Caracter\xedsticas de C#",id:"caracter\xedsticas-de-c",level:2},{value:"Tipado est\xe1tico y tipado din\xe1mico",id:"tipado-est\xe1tico-y-tipado-din\xe1mico",level:3},{value:"Proceso de compilaci\xf3n",id:"proceso-de-compilaci\xf3n",level:3},{value:"Gram\xe1tica de C#",id:"gram\xe1tica-de-c",level:2},{value:"Sintaxis de C#",id:"sintaxis-de-c",level:3},{value:"Declaraciones",id:"declaraciones",level:4},{value:"Comentarios",id:"comentarios",level:4},{value:"Bloques",id:"bloques",level:4},{value:"Vocabulario de C#",id:"vocabulario-de-c",level:3},{value:"M\xe9todos, los verbos de C#",id:"m\xe9todos-los-verbos-de-c",level:4},{value:"Tipos, atributos y variables. Los sustantivos de C#.",id:"tipos-atributos-y-variables-los-sustantivos-de-c",level:4},{value:"Trabajando con variables",id:"trabajando-con-variables",level:2},{value:"Constantes",id:"constantes",level:3},{value:"Inferencia de tipos",id:"inferencia-de-tipos",level:3},{value:"Common Type System",id:"common-type-system",level:2},{value:"Tipos de valor y tipos de referencia",id:"tipos-de-valor-y-tipos-de-referencia",level:3},{value:"Categor\xedas de tipos",id:"categor\xedas-de-tipos",level:3},{value:"Aliases",id:"aliases",level:3},{value:"Literales",id:"literales",level:3},{value:"Caracteres",id:"caracteres",level:3},{value:"Strings",id:"strings",level:3},{value:"Tipos num\xe9ricos",id:"tipos-num\xe9ricos",level:3},{value:"Enteros",id:"enteros",level:4},{value:"Punto flotante",id:"punto-flotante",level:4},{value:"Decimales",id:"decimales",level:4},{value:"Notaci\xf3n binaria y hexadecimal",id:"notaci\xf3n-binaria-y-hexadecimal",level:4},{value:"Tipos booleanos",id:"tipos-booleanos",level:3},{value:"Tipos din\xe1micos y tipo object",id:"tipos-din\xe1micos-y-tipo-object",level:3},{value:"Valores por defecto",id:"valores-por-defecto",level:3}],d={toc:p},m="wrapper";function c(e){let{components:a,...r}=e;return(0,o.kt)(m,(0,n.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introducci\xf3n-a-c"},"Introducci\xf3n a C#"),(0,o.kt)("p",null,"Durante nuestro viaje a trav\xe9s de las caracter\xedsticas comunes de los lenguajes de alto nivel y la programaci\xf3n orientada a objetos nos acompa\xf1ar\xe1 el lenguaje de programaci\xf3n C#. "),(0,o.kt)("p",null,"Tal vez algunas de las caracter\xedsticas de este lenguaje les parezcan similares a otros lenguajes que conozcan, y est\xe1n en lo correcto. El equipo de C#, desde sus inicios, no dud\xf3 en tomar grandes ideas de otros lenguajes y reformarlas para incorporarlas a C#. Las principales influencias han sido Java (sobre todo en los inicios), y m\xe1s cerca en el tiempo el mism\xedsimo F#. "),(0,o.kt)("p",null,"Fue dise\xf1ado por el ingeniero de Microsoft ",(0,o.kt)("a",{parentName:"p",href:"https://es.wikipedia.org/wiki/Anders_Hejlsberg"},"Anders Hejlsberg"),", quien tambi\xe9n est\xe1 involucrado en el desarrollo de Typescript desde 2012. "),(0,o.kt)("h2",{id:"caracter\xedsticas-de-c"},"Caracter\xedsticas de C#"),(0,o.kt)("p",null,"case sensitive\ntipado est\xe1tico\ncompilado"),(0,o.kt)("h3",{id:"tipado-est\xe1tico-y-tipado-din\xe1mico"},"Tipado est\xe1tico y tipado din\xe1mico"),(0,o.kt)("p",null,"Recordemos la diferencia entre tipado est\xe1tico y tipado din\xe1mico."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Tipado est\xe1tico")," \u2192 Decimos que un lenguaje es de tipado est\xe1tico, porque los tipos tienen que definirse en tiempo de compilaci\xf3n para que el programa funcione."),(0,o.kt)("h3",{id:"proceso-de-compilaci\xf3n"},"Proceso de compilaci\xf3n"),(0,o.kt)("h2",{id:"gram\xe1tica-de-c"},"Gram\xe1tica de C#"),(0,o.kt)("p",null,"sintaxis vocabulario sem\xe1ntica"),(0,o.kt)("h3",{id:"sintaxis-de-c"},"Sintaxis de C#"),(0,o.kt)("h4",{id:"declaraciones"},"Declaraciones"),(0,o.kt)("p",null,"Cuando escribimos en espa\xf1ol, marcamos el fin de una oraci\xf3n con un punto. Una oraci\xf3n se compone de m\xfaltiples palabras y frases con un orden espec\xedfico. Los lenguajes de programaci\xf3n tambi\xe9n tienen reglas de sintaxis. "),(0,o.kt)("p",null,"C# indica el fin de una declaraci\xf3n con un punto y coma. Una ",(0,o.kt)("strong",{parentName:"p"},"declaraci\xf3n (",(0,o.kt)("em",{parentName:"strong"},"statement"),")")," puede estar compuesta de m\xfaltiples ",(0,o.kt)("strong",{parentName:"p"},"variables")," y ",(0,o.kt)("strong",{parentName:"p"},"expresiones (",(0,o.kt)("em",{parentName:"strong"},"expressions"),")"),". En el siguiente ejemplo, ",(0,o.kt)("inlineCode",{parentName:"p"},"sueldoNeto")," es una variable y ",(0,o.kt)("inlineCode",{parentName:"p"},"sueldoBruto - aportes - impuestos")," es una expresi\xf3n compuesta de 3 ",(0,o.kt)("strong",{parentName:"p"},"operandos")," (",(0,o.kt)("inlineCode",{parentName:"p"},"sueldoBruto"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"aportes")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"impuestos"),") y los ",(0,o.kt)("strong",{parentName:"p"},"operadores")," ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"decimal sueldoNeto = sueldoBruto - aportes - impuestos;\n")),(0,o.kt)("p",null,"El orden de los operadores y los operandos importa, si los cambiaramos de lugar dar\xeda un resultado completamente distinto. "),(0,o.kt)("h4",{id:"comentarios"},"Comentarios"),(0,o.kt)("p",null,"Los comentarios le indican al compilador que ignore su contenido. Permite realizar aclaraciones o deshabilitar c\xf3digo temporalmente. "),(0,o.kt)("p",null,"Para realizar un comentario en C# utilizamos la doble barra ",(0,o.kt)("inlineCode",{parentName:"p"},"//"),". Lo que siga a la doble barra ser\xe1 ignorado por el compilador hasta el fin de la l\xednea."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// Falta descontar los aportes.\ndecimal sueldoNeto = sueldoBruto - impuestos;\n")),(0,o.kt)("p",null,"Si queremos escribir un comentario multi-l\xednea se utiliza ",(0,o.kt)("inlineCode",{parentName:"p"},"/*")," al inicio y ",(0,o.kt)("inlineCode",{parentName:"p"},"*/")," al final, todo el contenido entre esos dos s\xedmbolos ser\xe1 ignorado por el compilador. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'/* \n    Estamos en programaci\xf3n II de UTN Fra. \n\n    string saludo = "\xa1Hola Mundo!"\n    \n    Aprendemos a realizar comentarios en C#.\n*/\n')),(0,o.kt)("admonition",{title:"Informaci\xf3n",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"El atajo de teclado de Visual Studio para realizar comentarios es ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL + K + C"),", y para deshacerlos ",(0,o.kt)("inlineCode",{parentName:"p"},"CTRL + K + U"),". ")),(0,o.kt)("h4",{id:"bloques"},"Bloques"),(0,o.kt)("p",null,"En C# para escribir un bloque de c\xf3digo se utilizan llaves ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),". Si hacemos una comparaci\xf3n con el lenguaje humano, lo bloques ser\xedan an\xe1logos a los p\xe1rrafos. Los bloques empiezan con una declaraci\xf3n que define el contenido del bloque. "),(0,o.kt)("p",null,"En el siguiente ejemplo vemos que tenemos 3 bloques anidados. Uno definido por la palabra clave ",(0,o.kt)("inlineCode",{parentName:"p"},"namespace"),", otro por ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," y el \xfaltimo est\xe1 definido por la firma del ",(0,o.kt)("em",{parentName:"p"},"m\xe9todo")," (similar a un funci\xf3n)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using System; // El ; indica el fin de la declaraci\xf3n\n\n// 'namespace' define el tipo de bloque. 'Hola_Mundo' es un nombre o identificador para ese bloque. \nnamespace Hola_Mundo\n{ // La llave de apertura { indica el inicio de un bloque.\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\"); // Otra declaraci\xf3n.\n        }\n    }\n} // La llave de cierre } indica el fin de un bloque.\n")),(0,o.kt)("h3",{id:"vocabulario-de-c"},"Vocabulario de C#"),(0,o.kt)("p",null,"El vocabulario de C# est\xe1 compuesto de ",(0,o.kt)("strong",{parentName:"p"},"palabras clave (",(0,o.kt)("em",{parentName:"strong"},"keywords"),")"),", ",(0,o.kt)("strong",{parentName:"p"},"s\xedmbolos")," y ",(0,o.kt)("strong",{parentName:"p"},"tipos"),"."),(0,o.kt)("p",null,"Entre las palabras claves encontraremos ",(0,o.kt)("inlineCode",{parentName:"p"},"using"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"namespace"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"static"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bool"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"switch"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"break"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"do"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"foreach")," y m\xe1s. "),(0,o.kt)("p",null,"Entre los s\xedmbolos trabajaremos con ",(0,o.kt)("inlineCode",{parentName:"p"},'"'),", ",(0,o.kt)("inlineCode",{parentName:"p"},"'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"%"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$"),",entre otros."),(0,o.kt)("h4",{id:"m\xe9todos-los-verbos-de-c"},"M\xe9todos, los verbos de C#"),(0,o.kt)("p",null,"Los verbos en espa\xf1ol representan acciones como ",(0,o.kt)("em",{parentName:"p"},"correr"),", ",(0,o.kt)("em",{parentName:"p"},"jugar"),", ",(0,o.kt)("em",{parentName:"p"},"saltar"),". De la misma forma, los ",(0,o.kt)("strong",{parentName:"p"},"m\xe9todos")," en C# representan acciones que podr\xe1n ser ejecutadas por alguna parte del programa. Son similares a las funciones en otros lenguajes. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using System; \n\nnamespace Hola_Mundo\n{ \n    class Program\n    {\n        // Ac\xe1 comienza la declaraci\xf3n del m\xe9todo Main.\n        static void Main(string[] args)\n        {\n            /* Ac\xe1 se invoca/llama al m\xe9todo WriteLine \n            y se le pasa como argumento (dato o valor de entrada) un string. \n            */\n            Console.WriteLine("Hello World!"); \n        }\n        // Ac\xe1 finaliza la declaraci\xf3n del m\xe9todo Main.\n    }\n} \n')),(0,o.kt)("h4",{id:"tipos-atributos-y-variables-los-sustantivos-de-c"},"Tipos, atributos y variables. Los sustantivos de C#."),(0,o.kt)("p",null,"En espa\xf1ol los sustantivos son palabras que se utilizan para denominar seres, entidades u objetos. "),(0,o.kt)("p",null,"Por ejemplo, ",(0,o.kt)("em",{parentName:"p"},"Federico"),' es el nombre de un profesor. La palabra "profesor" nos indica el papel que juega ',(0,o.kt)("em",{parentName:"p"},"Fede")," dentro del contexto de la universidad. Podemos decir que ",(0,o.kt)("em",{parentName:"p"},"Fede")," es de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Profesor"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Profesor")," no es el \xfanico tipo dentro del contexto de la facultad, tambi\xe9n est\xe1n ",(0,o.kt)("inlineCode",{parentName:"p"},"Alumno"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Secretario"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Coordinador"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"LibretaUniversitaria"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Materia"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Aula"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Nota"),", entre otros. Los ",(0,o.kt)("strong",{parentName:"p"},"tipos")," son sustantivos que categorizan cosas. "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"legajoDocente")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"antig\xfcedad")," son caracter\xedsticas que forman parte de lo que describe a ",(0,o.kt)("em",{parentName:"p"},"Fede")," como profesor, son ",(0,o.kt)("strong",{parentName:"p"},"atributos"),"."),(0,o.kt)("p",null,"Por otra parte, ",(0,o.kt)("em",{parentName:"p"},"Fede")," no es el \xfanico ser de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"Profesor"),", tambi\xe9n est\xe1n ",(0,o.kt)("em",{parentName:"p"},"Lucas"),", ",(0,o.kt)("em",{parentName:"p"},"Ezequiel")," y ",(0,o.kt)("em",{parentName:"p"},"Mauricio"),". Cada uno de estos seres o manifestaciones concretas de un tipo son ",(0,o.kt)("strong",{parentName:"p"},"variables"),", sustantivos que se refieren a una cosa espec\xedfica.  "),(0,o.kt)("h2",{id:"trabajando-con-variables"},"Trabajando con variables"),(0,o.kt)("h3",{id:"constantes"},"Constantes"),(0,o.kt)("h3",{id:"inferencia-de-tipos"},"Inferencia de tipos"),(0,o.kt)("h2",{id:"common-type-system"},"Common Type System"),(0,o.kt)("p",null,"C# por defecto s\xf3lo trae algunas palabras y, estrictamente, no define ning\xfan tipo. Todos los tipos que usamos en C# son provistos por el entorno de .NET. Durante la cursada aprenderemos sobre muchos de los tipos que tenemos disponibles en la plataforma y tambi\xe9n crearemos nuevos."),(0,o.kt)("p",null,"El ",(0,o.kt)("strong",{parentName:"p"},"Common Type System (CTS)")," define un conjunto de tipos de datos com\xfan a todos los lenguajes soportados por .NET. "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Establece un marco de herramientas que habilita la ejecuci\xf3n de los distintos lenguajes de la plataforma. "),(0,o.kt)("li",{parentName:"ul"},"Provee un modelo orientado a objetos. "),(0,o.kt)("li",{parentName:"ul"},"Define un conjunto de reglas que todos los lenguajes deben seguir en lo que refiere a tipos."),(0,o.kt)("li",{parentName:"ul"},"Provee una biblioteca que contiene los tipos primitivos b\xe1sicos (Boolean, Int32, Byte, Char, etc). "),(0,o.kt)("li",{parentName:"ul"},"Define tipos de dato en dos categor\xedas: de valor y de referencia.")),(0,o.kt)("h3",{id:"tipos-de-valor-y-tipos-de-referencia"},"Tipos de valor y tipos de referencia"),(0,o.kt)("p",null,"Existen dos segmentos o categor\xedas de memoria: la ",(0,o.kt)("strong",{parentName:"p"},"pila (",(0,o.kt)("em",{parentName:"strong"},"stack memory"),")")," y el ",(0,o.kt)("strong",{parentName:"p"},"mont\xf3n (",(0,o.kt)("em",{parentName:"strong"},"heap memory"),")"),". La memoria stack es m\xe1s r\xe1piida pero limitada en tama\xf1o. La memoria heap es m\xe1s lenta pero m\xe1s abundante."),(0,o.kt)("admonition",{title:"Stack Overflow",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"La famosa excepci\xf3n Stack Overflow se lanza al llenarse el espacio de la memoria stack, que es muy limitado. Suele suceder cuando se producen llamadas recursivas accidentales o nos encontramos dentro de un loop infinito. ")),(0,o.kt)("p",null,"Los ",(0,o.kt)("strong",{parentName:"p"},"tipos de valor (",(0,o.kt)("em",{parentName:"strong"},"value types"),")")," son tipos de dato representados por su valor real. Si son asignados a una variable, esa variable obtendr\xe1 una nueva copia del valor. ",(0,o.kt)("strong",{parentName:"p"},"Todos los tipos de valor se almacenan en la pila.")," "),(0,o.kt)("p",null,"Los ",(0,o.kt)("strong",{parentName:"p"},"tipos de referencia (",(0,o.kt)("em",{parentName:"strong"},"reference types"),")"),", al contrario, son tipos de dato representados por una referencia que apunta a un sector de memoria donde se encuentra el valor real. Si son asignados a una variable, esa variable almacenar\xe1 la referencia y apuntar\xe1 al valor original. No se realiza ninguna copia del valor. ",(0,o.kt)("strong",{parentName:"p"},"Todos los tipos de referencia se almacenan en el mont\xf3n.")," "),(0,o.kt)("h3",{id:"categor\xedas-de-tipos"},"Categor\xedas de tipos"),(0,o.kt)("p",null,".NET define cinco categor\xedas de tipos de datos."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Categor\xeda"),(0,o.kt)("th",{parentName:"tr",align:null},"Palabra clave"),(0,o.kt)("th",{parentName:"tr",align:null},"Valor/Referencia"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Clases")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"class"))),(0,o.kt)("td",{parentName:"tr",align:null},"Tipo de referencia")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Estructuras")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"struct"))),(0,o.kt)("td",{parentName:"tr",align:null},"Tipo de valor")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Enumerados")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"enum"))),(0,o.kt)("td",{parentName:"tr",align:null},"Tipo de valor")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Interfaces")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"interface"))),(0,o.kt)("td",{parentName:"tr",align:null},"Tipo de referencia")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},"Delegados")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("em",{parentName:"strong"},"delegate"))),(0,o.kt)("td",{parentName:"tr",align:null},"Tipo de referencia")))),(0,o.kt)("p",null,"Entraremos en el detalle de cada una de estas categor\xedas a lo largo de la cursada. "),(0,o.kt)("h3",{id:"aliases"},"Aliases"),(0,o.kt)("p",null,"Algunas de las palabras clave de C# como ",(0,o.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," son ",(0,o.kt)("strong",{parentName:"p"},"alias (",(0,o.kt)("em",{parentName:"strong"},"aliases"),")")," que representan tipos proveidos por la implementaci\xf3n de la plataforma .NET donde se ejecuta C#. Por ejemplo, ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," es un alias para el tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"System.Int32"),"."),(0,o.kt)("h3",{id:"literales"},"Literales"),(0,o.kt)("p",null,"Los ",(0,o.kt)("strong",{parentName:"p"},"valores literales (",(0,o.kt)("em",{parentName:"strong"},"literal value"),")")," son una notaci\xf3n que representa un valor fijo. Dependiendo el tipo de dato, existe una notaci\xf3n diferente para los literales. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"string saludo = \"Hola Mundo\"; // \"Hola Mundo\" es un literal de texto que se est\xe1 asignando a la variable 'saludo' de tipo string.\n\nint numero = 5; // 5 es un literal num\xe9rico que se est\xe1 asignando a la variable 'numero' de tipo entero.\n")),(0,o.kt)("h3",{id:"caracteres"},"Caracteres"),(0,o.kt)("p",null,"Cuando trabajamos con un caracter individual, como podr\xeda ser una letra, el tipo a utilizar es ",(0,o.kt)("inlineCode",{parentName:"p"},"char"),". "),(0,o.kt)("p",null,"Los literales de este tipo deben estar encerrados por comillas simples ",(0,o.kt)("inlineCode",{parentName:"p"},"'"),"."),(0,o.kt)("p",null,"Los ",(0,o.kt)("inlineCode",{parentName:"p"},"char")," son tipos de valor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"char simbolo = '$';\nchar letra = 'Z';\nchar numero = '1'; // '1' se almacena como tipo char, no es num\xe9rico.\n")),(0,o.kt)("h3",{id:"strings"},"Strings"),(0,o.kt)("p",null,"Cuando trabajamos con texto formado por m\xfaltiples caracteres el tipo a utilizar es ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),". "),(0,o.kt)("p",null,"Los literales de este tipo deben estar encerrados por comillas dobles ",(0,o.kt)("inlineCode",{parentName:"p"},'"'),"."),(0,o.kt)("p",null,"Los ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," son tipos de referencia. Internamente son arrays de ",(0,o.kt)("inlineCode",{parentName:"p"},"char"),", incluso pueden ser recorridos con un bucle ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"foreach"),"."),(0,o.kt)("p",null,"Los ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," se pueden concatenar usando el operador ",(0,o.kt)("inlineCode",{parentName:"p"},"+"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'string nombre = "Florencia";\nstring telefono = "(+54) 9 11-12345-15432";\nstring contacto = nombre + " tiene el n\xfamero de tel\xe9fono " + telefono;\n')),(0,o.kt)("h3",{id:"tipos-num\xe9ricos"},"Tipos num\xe9ricos"),(0,o.kt)("p",null,"Los n\xfameros son datos con los que vamos a realizar alguna operaci\xf3n aritm\xe9tica (como sumar o multiplicar). Un DNI, un n\xfamero de tel\xe9fono, un legajo, NO son n\xfameros. "),(0,o.kt)("p",null,"Todos los tipos num\xe9ricos primitivos de C# son tipos de valor."),(0,o.kt)("h4",{id:"enteros"},"Enteros"),(0,o.kt)("p",null,"El conjunto de ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros reales")," se puede dividir en dos subconjuntos: racionales e irracionales. Los ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros racionales")," son aquellos que pueden expresarse como la divisi\xf3n de dos n\xfameros enteros, los ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros irracionales")," son todos los dem\xe1s. A su vez, el conjunto de los racionales se puede dividir en ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros enteros")," y ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros fraccionarios"),". "),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Clasificaci\xf3n de los n\xfameros",src:t(8887).Z,width:"572",height:"268"})),(0,o.kt)("p",null,"Los n\xfameros enteros (sin punto decimal) se representan con los tipos ",(0,o.kt)("inlineCode",{parentName:"p"},"short"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"long"),". Los enteros positivos incluyendo el cero se conocen como ",(0,o.kt)("strong",{parentName:"p"},"n\xfameros naturales")," y se representan con los tipos enteros sin signo (",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"unsigned")),") como ",(0,o.kt)("inlineCode",{parentName:"p"},"ushort"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"uint")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"ulong"),"."),(0,o.kt)("p",null,"Los literales de ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," deben ir acompa\xf1ados del sufijo ",(0,o.kt)("inlineCode",{parentName:"p"},"L"),". Para los enteros no es necesarario un sufijo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"uint numeroNatural = 10;\n\nint numeroEntero = -5;\n\nlong numeroGrande = 20L;\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Palabra clave"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Rango"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Tama\xf1o"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Tipo en .NET"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"sbyte")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"-128")," a ",(0,o.kt)("em",{parentName:"td"},"127")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 8-bit con signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.SByte"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"byte")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"0")," a ",(0,o.kt)("em",{parentName:"td"},"255")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 8-bit sin signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.Byte"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"short")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"32.768")," a ",(0,o.kt)("em",{parentName:"td"},"32.767")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 16-bit con signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.Int16"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"ushort")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"0")," a ",(0,o.kt)("em",{parentName:"td"},"65.535")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 16-bit sin signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.UInt16"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"int")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"-2.147.483.648")," a ",(0,o.kt)("em",{parentName:"td"},"2.147.483.647")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 32-bit con signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.Int32"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"uint")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"0")," a ",(0,o.kt)("em",{parentName:"td"},"4.294.967.295")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 32-bit sin signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.UInt32"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"long")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"-9.223.372.036.854.775.808")," a ",(0,o.kt)("em",{parentName:"td"},"9.223.372.036.854.775.807")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 64-bit con signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.Int64"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"ulong")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"0")," a ",(0,o.kt)("em",{parentName:"td"},"18.446.744.073.709.551.615")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Entero de 64-bit sin signo"),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.UInt64"))))),(0,o.kt)("h4",{id:"punto-flotante"},"Punto flotante"),(0,o.kt)("p",null,"Por defecto los literales fraccionarios (con punto decimal) son de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"double"),". Los literales de ",(0,o.kt)("inlineCode",{parentName:"p"},"float")," deben ir acompa\xf1ados del sufijo ",(0,o.kt)("inlineCode",{parentName:"p"},"F"),". Los literales de ",(0,o.kt)("inlineCode",{parentName:"p"},"decimal")," deben ir acompa\xf1ados del sufijo ",(0,o.kt)("inlineCode",{parentName:"p"},"M"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"float numeroFlotantePrecisionSimple = 2.5F;\n\ndouble numeroFlotantePrecisionDoble = 2.5;\n\ndecimal numeroDecimal = 2.5M;\n")),(0,o.kt)("h4",{id:"decimales"},"Decimales"),(0,o.kt)("admonition",{title:"Advertencia",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"No se deben comparar valores ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," usando ",(0,o.kt)("inlineCode",{parentName:"p"},"=="),". El tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," no garantiza precisi\xf3n porque existen algunos n\xfameros que no pueden ser representados como valores de punto flotante. "),(0,o.kt)("p",{parentName:"admonition"},"En 1991, durante la primera guerra del golfo, usar n\xfameros de punto flotante ",(0,o.kt)("a",{parentName:"p",href:"https://www-users.cse.umn.edu/~arnold/disasters/patriot.html"},"le cost\xf3 la vida a 28 soldados")," al no poder rastrear e interceptar un misil con precisi\xf3n. ")),(0,o.kt)("admonition",{title:"Buena pr\xe1ctica",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Es una buena pr\xe1ctica usar ",(0,o.kt)("inlineCode",{parentName:"p"},"int")," para n\xfameros enteros y ",(0,o.kt)("inlineCode",{parentName:"p"},"double")," para fraccionarios que no ser\xe1n comparados a otros valores. Usar ",(0,o.kt)("inlineCode",{parentName:"p"},"decimal")," para dinero y valores donde la precisi\xf3n es importante. ")),(0,o.kt)("h4",{id:"notaci\xf3n-binaria-y-hexadecimal"},"Notaci\xf3n binaria y hexadecimal"),(0,o.kt)("p",null,"C# tambi\xe9n permite escribir literales num\xe9ricos en binario (base 2) y hexadecimal (base 16). Un literal binario debe empezar con ",(0,o.kt)("inlineCode",{parentName:"p"},"0b"),", mientras que uno hexadecimal con ",(0,o.kt)("inlineCode",{parentName:"p"},"0x"),"."),(0,o.kt)("p",null,"Desde C# 7.0 se puede usar el gui\xf3n bajo ",(0,o.kt)("inlineCode",{parentName:"p"},"_")," como separador de digitos con el \xfanico uso de mejorar la legibilidad del n\xfamero. "),(0,o.kt)("p",null,"En el siguiente ejemplo vemos como escribir el valor de dos millones en decimal, binario y hexadecimal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"// Notaci\xf3n decimal\nint notacionBase10 = 2_000_000; // El _ es una ayuda visual para separar los d\xedgitos. No cumple otra funci\xf3n. \n\n// Notaci\xf3n binaria\nint notacionBase2 = 0b_0001_1110_1000_0100_1000_0000;\n\n// Notaci\xf3n hexadecimal\nint notacionBase16 = 0x_001E_8480;\n")),(0,o.kt)("p",null,"Si comparamos las variables con el operador de igualdad ",(0,o.kt)("inlineCode",{parentName:"p"},"==")," observaremos que, al ser el mismo valor pero expresado con diferentes notaciones, la igualdad es verdadera."),(0,o.kt)("h3",{id:"tipos-booleanos"},"Tipos booleanos"),(0,o.kt)("p",null,"Los tipos booleanos s\xf3lo pueden contener dos valores literales ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". Se usan principalmente en condiciones de bloques de selecci\xf3n  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"bool verdadero = true;\nbool falso = false;\n")),(0,o.kt)("h3",{id:"tipos-din\xe1micos-y-tipo-object"},"Tipos din\xe1micos y tipo object"),(0,o.kt)("h3",{id:"valores-por-defecto"},"Valores por defecto"),(0,o.kt)("p",null,"Por defecto los tipos de valor contienen del valor ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," si son num\xe9ricos, ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," si son de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"''")," si son de tipo ",(0,o.kt)("inlineCode",{parentName:"p"},"char"),". Por otra parte, si no se inicializan, las variables de tipos de referencia contendr\xe1n el valor ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," que indica que esa variable no apunta a ninguna direcci\xf3n de memoria."),(0,o.kt)("p",null,"El operador ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," recibe como argumento un tipo de dato y nos devuelve el valor por defecto de ese tipo. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'Console.WriteLine("Valor por defecto de enteros: {0}", default(int));\nConsole.WriteLine("Valor por defecto de flotantes: {0}", default(double));\nConsole.WriteLine("Valor por defecto de booleanos: {0}", default(bool));\nConsole.WriteLine("Valor por defecto de fechas: {0}", default(DateTime));\nConsole.WriteLine("Valor por defecto de strings: {0}", default(string));\nConsole.WriteLine("Valor por defecto de chars: {0}", default(char));\n')),(0,o.kt)("p",null,"La salida del c\xf3digo anterior es:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Valor por defecto de enteros: 0\nValor por defecto de flotantes: 0\nValor por defecto de booleanos: False\nValor por defecto de fechas: 1/1/0001 00:00:00\nValor por defecto de strings:\nValor por defecto de chars:\n")),(0,o.kt)("h2",{id:""}))}c.isMDXComponent=!0},8887:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/clasificacion-numeros-8013ffba6287f58d0504c26473bbd9fd.png"}}]);