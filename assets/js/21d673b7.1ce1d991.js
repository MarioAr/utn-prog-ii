"use strict";(self.webpackChunkprog_2_web=self.webpackChunkprog_2_web||[]).push([[1337],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>b});var o=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,o,a=function(e,r){if(null==e)return{};var t,o,a={},n=Object.keys(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)t=n[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=o.createContext({}),l=function(e){var r=o.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},u=function(e){var r=l(e.components);return o.createElement(i.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,b=p["".concat(i,".").concat(m)]||p[m]||d[m]||n;return t?o.createElement(b,s(s({ref:r},u),{},{components:t})):o.createElement(b,s({ref:r},u))}));function b(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var n=t.length,s=new Array(n);s[0]=m;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c[p]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<n;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5610:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var o=t(7462),a=(t(7294),t(3905));const n={sidebar_label:"Sobrecarga de Constructores",slug:"/clases/sobrecarga/apuntes/sobrecarga-constructores",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null},s=void 0,c={unversionedId:"clases/sobrecarga/Apuntes/sobrecarga-constructores",id:"clases/sobrecarga/Apuntes/sobrecarga-constructores",title:"sobrecarga-constructores",description:"Sobrecarga de Constructores",source:"@site/docs/clases/04-sobrecarga/Apuntes/02-sobrecarga-constructores.md",sourceDirName:"clases/04-sobrecarga/Apuntes",slug:"/clases/sobrecarga/apuntes/sobrecarga-constructores",permalink:"/utn-prog-ii/docs/clases/sobrecarga/apuntes/sobrecarga-constructores",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/clases/04-sobrecarga/Apuntes/02-sobrecarga-constructores.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Sobrecarga de Constructores",slug:"/clases/sobrecarga/apuntes/sobrecarga-constructores",hide_table_of_contents:!1,hide_title:!0,author:null,authorURL:null}},i={},l=[{value:"Sobrecarga de Constructores",id:"sobrecarga-de-constructores",level:2}],u={toc:l},p="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,o.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"sobrecarga-de-constructores"},"Sobrecarga de Constructores"),(0,a.kt)("p",null,"Los constructores aseguran que cada objeto comience en un estado consistente. La sobrecarga de constructores permite a los objetos inicializarse de distintas formas. Para sobrecargar a los constructores, s\xf3lo hay que proporcionar varias declaraciones del constructor con distintas firmas."),(0,a.kt)("p",null,"Para invocar el constructor apropiado, el compilador relaciona el n\xfamero y los tipos de los argumentos especificados en la llamada al constructor, con el n\xfamero y los tipos de los par\xe1metros especificados en la declaraci\xf3n de cada constructor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Tiempo{\n    \n    private int hora;\n    private int minuto; \n    private int segundo;\n\n    public Tiempo() : this( 0, 0, 0 ) \n    { } \n\n    public Tiempo( int h ) : this( h, 0, 0 )\n    { }\n\n    public Tiempo( int h, int m ) : this( h, m, 0 ) \n    { }\n\n    public Tiempo( int h, int m, int s ){\n        hora = h;\n        minuto = m;\n        segundo = s;\n}\n")),(0,a.kt)("p",null,"El encabezado del constructor seguido de un signo de dos puntos (:) y de la palabra clave this, se utiliza para invocar a otro constructor. En el ejemplo anterior: El constructor sin par\xe1metros, invoca al constructor que recibe tres argumentos y pasa los valores de 0 para hora, minuto y segundo. Es una forma de reutilizar el c\xf3digo de inicializaci\xf3n que proporciona uno de los constructores de la clase, en vez de definir c\xf3digo similar en el cuerpo de otro constructor. Utilizamos esta sintaxis en cuatro de los cinco constructores de Tiempo para que la clase sea m\xe1s f\xe1cil de mantener. Si necesitamos cambiar la forma en que se inicializan los objetos de la clase Tiempo, s\xf3lo hay que modificar el constructor al que necesitan llamar los dem\xe1s constructores de la clase."))}d.isMDXComponent=!0}}]);