"use strict";(self.webpackChunkprog_2_web=self.webpackChunkprog_2_web||[]).push([[8196],{3905:(e,o,n)=>{n.d(o,{Zo:()=>c,kt:()=>b});var a=n(67294);function t(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function s(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?s(Object(n),!0).forEach((function(o){t(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function i(e,o){if(null==e)return{};var n,a,t=function(e,o){if(null==e)return{};var n,a,t={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],o.indexOf(n)>=0||(t[n]=e[n]);return t}(e,o);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=a.createContext({}),d=function(e){var o=a.useContext(l),n=o;return e&&(n="function"==typeof e?e(o):r(r({},o),e)),n},c=function(e){var o=d(e.components);return a.createElement(l.Provider,{value:o},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},m=a.forwardRef((function(e,o){var n=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=t,b=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return n?a.createElement(b,r(r({ref:o},c),{},{components:n})):a.createElement(b,r({ref:o},c))}));function b(e,o){var n=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var s=n.length,r=new Array(s);r[0]=m;var i={};for(var l in o)hasOwnProperty.call(o,l)&&(i[l]=o[l]);i.originalType=e,i[p]="string"==typeof e?e:t,r[1]=i;for(var d=2;d<s;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},63754:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(87462),t=(n(67294),n(3905));const s={sidebar_label:"Objetos",slug:"/clases/objetos/apuntes/objetos",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},r=void 0,i={unversionedId:"clases/objetos/Apuntes/objetos",id:"clases/objetos/Apuntes/objetos",title:"objetos",description:"Objetos",source:"@site/docs/clases/03-objetos/Apuntes/03-objetos.md",sourceDirName:"clases/03-objetos/Apuntes",slug:"/clases/objetos/apuntes/objetos",permalink:"/utn-prog-ii/docs/clases/objetos/apuntes/objetos",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/clases/03-objetos/Apuntes/03-objetos.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Objetos",slug:"/clases/objetos/apuntes/objetos",hide_table_of_contents:!1,hide_title:!0,author:"Mauricio Cerizza",authorURL:"https://github.com/mauricioCerizza"},sidebar:"Clases",previous:{title:"Clases",permalink:"/utn-prog-ii/docs/clases/objetos/apuntes/clases"},next:{title:"Constructores",permalink:"/utn-prog-ii/docs/clases/objetos/apuntes/constructores"}},l={},d=[{value:"Objetos",id:"objetos",level:2},{value:"Instancias de una clase",id:"instancias-de-una-clase",level:3},{value:"Identidad de un objeto",id:"identidad-de-un-objeto",level:3}],c={toc:d},p="wrapper";function u(e){let{components:o,...n}=e;return(0,t.kt)(p,(0,a.Z)({},c,n,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"objetos"},"Objetos"),(0,t.kt)("p",null,"Una clase es como un molde que especifica lo que puede hacer ese tipo. Un objeto es b\xe1sicamente un bloque de memoria que se ha asignado y configurado de acuerdo con el molde. Un programa puede crear muchos objetos de la misma clase. Los objetos tambi\xe9n se denominan instancias y se pueden almacenar en una variable con nombre o en una matriz o colecci\xf3n. Se utilizan estas variables para llamar a los m\xe9todos y acceder a las propiedades p\xfablicas del objeto. En un lenguaje orientado a objetos como C#, un programa t\xedpico consta de varios objetos que interact\xfaan din\xe1micamente."),(0,t.kt)("h3",{id:"instancias-de-una-clase"},"Instancias de una clase"),(0,t.kt)("p",null,"Las instancias de las clases se crean utilizando el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"new"),". En el ejemplo siguiente, ",(0,t.kt)("inlineCode",{parentName:"p"},"Persona")," es el tipo y ",(0,t.kt)("inlineCode",{parentName:"p"},"persona1")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"persona2")," son instancias u objetos de ese tipo."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},'public class Persona\n{\n    public string nombre;\n    public int edad;\n\n    public Persona(string nombre, int edad)\n    {\n        this.nombre = nombre;\n        this.edad = edad;\n    }\n    // Otras propiedadse, metodos...\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Persona persona1 = new Persona("Leopold", 6);\n        Console.WriteLine("persona1 Nombre = {0} Edad = {1}", persona1.nombre, persona1.edad);\n\n        // Declaro nueva persona, asigno persona1 .\n        Persona persona2 = persona1;\n\n        // Modifico nomebre y edad de persona2, y persona1 tambi\xe9n es modificada.\n        persona2.nombre = "Molly";\n        persona2.edad = 16;\n\n        Console.WriteLine("persona2 Nombre = {0} Edad = {1}", persona2.nombre, persona2.edad);\n        Console.WriteLine("persona1 Nombre = {0} Edad = {1}", persona1.nombre, persona1.edad);\n    }\n}\n/*\n    Output:\n    persona1 Nombre = Leopold Edad = 6\n    persona2 Nombre = Molly Edad = 16\n    persona1 Nombre = Molly Edad = 16\n*/\n')),(0,t.kt)("h3",{id:"identidad-de-un-objeto"},"Identidad de un objeto"),(0,t.kt)("p",null,"Cuando comparamos la igualdad de dos objetos, primero debemos distinguir si se desea saber si las dos variables representan el mismo objeto en la memoria o si los valores de uno o m\xe1s de sus campos son equivalentes. "),(0,t.kt)("p",null,"Para determinar si dos instancias de clase se refieren a la misma ubicaci\xf3n en la memoria (lo que significa que tienen la misma identidad), use el m\xe9todo est\xe1tico ",(0,t.kt)("inlineCode",{parentName:"p"},"Object.Equals")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"ReferenceEquals"),". ( ",(0,t.kt)("inlineCode",{parentName:"p"},"System.Object")," es la clase base impl\xedcita para todos los tipos de valor y tipos de referencia)."),(0,t.kt)("p",null,"Para determinar si los valores de los campos en dos instancias de clase son iguales, puede usar el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"Equals")," o el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"=="),'. Sin embargo, solo \xfaselos si la clase los ha anulado o sobrecargado para proporcionar una definici\xf3n personalizada de lo que significa "igualdad" para objetos de ese tipo. ',(0,t.kt)("em",{parentName:"p"},"Veremos como hacerlo en las proximas clases"),"."))}u.isMDXComponent=!0}}]);