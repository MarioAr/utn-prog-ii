"use strict";(self.webpackChunkprog_2_web=self.webpackChunkprog_2_web||[]).push([[9894],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3493:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={title:"Apuntes - Interfaces",sidebar_label:"Interfaces",slug:"/clases/interfaces/apuntes/interfaces",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},i=void 0,o={unversionedId:"clases/interfaces/Apuntes/interfaces",id:"clases/interfaces/Apuntes/interfaces",title:"Apuntes - Interfaces",description:"\xbfQu\xe9 son las Interfaces?",source:"@site/docs/clases/14-interfaces/Apuntes/00-interfaces.md",sourceDirName:"clases/14-interfaces/Apuntes",slug:"/clases/interfaces/apuntes/interfaces",permalink:"/utn-prog-ii/docs/clases/interfaces/apuntes/interfaces",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/clases/14-interfaces/Apuntes/00-interfaces.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Apuntes - Interfaces",sidebar_label:"Interfaces",slug:"/clases/interfaces/apuntes/interfaces",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null}},l={},c=[{value:"\xbfQu\xe9 son las Interfaces?",id:"qu\xe9-son-las-interfaces",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"qu\xe9-son-las-interfaces"},"\xbfQu\xe9 son las Interfaces?"),(0,r.kt)("p",null,"Una interfaz define un contrato. Cualquier clase o estructura no abstracta que implemente este contrato debe incorporar una implementaci\xf3n de los miembros definidos en la interfaz. "),(0,r.kt)("p",null,"Una declaraci\xf3n de una interfaz debe contener las declaraciones (es decir, las firmas sin la implementaci\xf3n) de los siguientes miembros, que pueden o no ser est\xe1ticos (si es est\xe1tico s\xed debe tener la implementaci\xf3n):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"M\xe9todos."),(0,r.kt)("li",{parentName:"ul"},"Propiedades."),(0,r.kt)("li",{parentName:"ul"},"Indexadores."),(0,r.kt)("li",{parentName:"ul"},"Eventos."),(0,r.kt)("li",{parentName:"ul"},"Constructores est\xe1ticos.")),(0,r.kt)("p",null,"Al utilizar interfaces podemos, por ejemplo, incluir diferentes comportamientos en una clase. Esto es importante porque C# no acepta la herencia m\xfaltiple."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"C# no permite especificar atributos en las interfaces."),(0,r.kt)("li",{parentName:"ul"},"Todos los m\xe9todos son p\xfablicos por default."),(0,r.kt)("li",{parentName:"ul"},"Todos los m\xe9todos son como \u201cabstractos\u201d ya que no cuentan con implementaci\xf3n. "),(0,r.kt)("li",{parentName:"ul"},"Se pueden especificar propiedades."),(0,r.kt)("li",{parentName:"ul"},"Las clases pueden implementar varias interfaces."),(0,r.kt)("li",{parentName:"ul"},"Las interfaces pueden heredar de otras interfaces."),(0,r.kt)("li",{parentName:"ul"},"Se las llama como un m\xe9todo de instancia.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    public interface IMoverse\n    {\n        public void Moverse();\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    public interface IHacerSonido\n    {\n        public void HacerSonido();\n    }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'    public class Gato : IMoverse, IHacerSonido\n    {\n        public void Moverse() \n        {\n            Console.WriteLine("Caminata gatuna");\n        }\n        public void HacerSonido() \n        {\n            Console.WriteLine("Miau Miau!");\n        }\n    }\n')),(0,r.kt)("admonition",{title:"IMPORTANTE",type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Diferencia entre clase abstracta e interfaces:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Una clase abstracta permite crear funcionalidad que la clase que hereda puede implementar o sobreescribir. Una clase puede heredar una sola clase abstracta."),(0,r.kt)("li",{parentName:"ul"},"Una interfaz permite solamente definir funcionalidad, no implementarla. Se pueden heredar m\xfaltiples interfaces."))))}d.isMDXComponent=!0}}]);