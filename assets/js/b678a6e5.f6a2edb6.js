"use strict";(self.webpackChunkprog_2_web=self.webpackChunkprog_2_web||[]).push([[85],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),l=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=l(e.components);return t.createElement(c.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?t.createElement(g,i(i({ref:a},p),{},{components:n})):t.createElement(g,i({ref:a},p))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},80951:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=n(87462),r=(n(67294),n(3905));const s={title:"Apuntes - Tipos gen\xe9ricos",sidebar_label:"Tipos gen\xe9ricos",slug:"/clases/generics/apuntes/tipos-genericos",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},i=void 0,o={unversionedId:"clases/generics/Apuntes/tipos-genericos",id:"clases/generics/Apuntes/tipos-genericos",title:"Apuntes - Tipos gen\xe9ricos",description:"GENERICS",source:"@site/docs/clases/12-generics/Apuntes/00-tipos-genericos.md",sourceDirName:"clases/12-generics/Apuntes",slug:"/clases/generics/apuntes/tipos-genericos",permalink:"/docs/clases/generics/apuntes/tipos-genericos",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/clases/12-generics/Apuntes/00-tipos-genericos.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Apuntes - Tipos gen\xe9ricos",sidebar_label:"Tipos gen\xe9ricos",slug:"/clases/generics/apuntes/tipos-genericos",hide_table_of_contents:!1,hide_title:!1,author:null,authorURL:null},sidebar:"Clases",previous:{title:"\xcdndice",permalink:"/docs/generics"},next:{title:"Cuestionario",permalink:"/docs/clases/generics/apuntes/cuestionario"}},c={},l=[{value:"GENERICS",id:"generics",level:2},{value:"Clases Genericas",id:"clases-genericas",level:3},{value:"M\xe9todos gen\xe9ricos",id:"m\xe9todos-gen\xe9ricos",level:3},{value:"Restricciones gen\xe9ricas de C#",id:"restricciones-gen\xe9ricas-de-c",level:3}],p={toc:l},u="wrapper";function d(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"generics"},"GENERICS"),(0,r.kt)("p",null,"Gen\xe9rico significa la forma general, no espec\xedfica. En C#, gen\xe9rico significa que no es espec\xedfico de un tipo de datos en particular."),(0,r.kt)("p",null,"C# le permite definir clases gen\xe9ricas, interfaces, clases abstractas, campos, m\xe9todos, m\xe9todos est\xe1ticos, propiedades, eventos, delegados y operadores utilizando el par\xe1metro de tipo y sin el tipo de datos espec\xedfico. Un par\xe1metro de tipo es un marcador de posici\xf3n para un tipo particular especificado al crear una instancia del tipo gen\xe9rico."),(0,r.kt)("p",null,"Un tipo gen\xe9rico se declara especificando un par\xe1metro de tipo entre corchetes angulares despu\xe9s de un nombre de tipo, por ejemplo, ",(0,r.kt)("inlineCode",{parentName:"p"},"TypeName<T>")," donde T es un par\xe1metro de tipo."),(0,r.kt)("h3",{id:"clases-genericas"},"Clases Genericas"),(0,r.kt)("p",null,"Caracter\xedsticas de clase gen\xe9ricas"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Una clase gen\xe9rica aumenta la reutilizaci\xf3n. Cuantos m\xe1s par\xe1metros de tipo, m\xe1s reutilizable se vuelve. Sin embargo, demasiada generalizaci\xf3n hace que el c\xf3digo sea dif\xedcil de entender y mantener."),(0,r.kt)("li",{parentName:"ul"},"Una clase gen\xe9rica puede ser una clase base para otras clases gen\xe9ricas o no gen\xe9ricas o clases abstractas."),(0,r.kt)("li",{parentName:"ul"},"Una clase gen\xe9rica puede derivarse de otras interfaces, clases o clases abstractas gen\xe9ricas o no gen\xe9ricas.")),(0,r.kt)("p",null,"Las clases gen\xe9ricas se definen mediante un par\xe1metro de tipo entre corchetes angulares despu\xe9s del nombre de la clase. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class MiClase<T>\n{\n    private T dato;\n\n    public T Dato{get; set;}\n}\n")),(0,r.kt)("p",null,"La clase ",(0,r.kt)("inlineCode",{parentName:"p"},"MiClase")," est\xe1 definida como una gen\xe9rica, por contener el parametro de tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"<T>")," , que se puede utilizar como un tipo de campo, propiedad, par\xe1metro de m\xe9todo, tipos de devoluci\xf3n y delegados en ",(0,r.kt)("inlineCode",{parentName:"p"},"MiClase"),". Por ejemplo, Dato es una propiedad gen\xe9rica porque hemos usado un par\xe1metro de tipo T como su tipo en lugar del tipo de datos espec\xedfico."),(0,r.kt)("p",null,"No es necesario utilizar la letra ",(0,r.kt)("em",{parentName:"p"},"T")," como par\xe1metro de tipo. Puede dar cualquier nombre a un par\xe1metro de tipo. Generalmente, T se utiliza cuando solo hay un par\xe1metro de tipo. Se recomienda utilizar un nombre de par\xe1metro de tipo m\xe1s legible seg\xfan el requisito, como TKey, TValue, etc. "),(0,r.kt)("p",null,"Cuando crea una instancia de una clase gen\xe9rica, especifica los tipos reales para sustituir los par\xe1metros de tipo. Esto establece una nueva clase gen\xe9rica, denominada clase gen\xe9rica construida, con los tipos elegidos sustituidos en todos los lugares donde aparecen los par\xe1metros de tipo. El resultado es una clase con seguridad de tipos que se adapta a su elecci\xf3n de tipos, siguiendo el ejemplo anterior vamos a instanciar y construir nuestra clase gen\xe9rica: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public static Main(string[] args )\n{\n    MiClase<string> miClase = new MiClase<string>();\n\n    miClase.Dato = "Hola";\n    //...\n    Console.WriteLine(miClase.Dato);\n}\n')),(0,r.kt)("p",null,"El parametro T se reempla por el tipo de dato que necesit\xe1bamos usar. De esta forma podr\xedamos reutilizar la misma clase generica y tiparla seg\xfan lo que necesitemos en nuestro programa: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public static Main(string[] args )\n{\n    MiClase<string> miClase = new MiClase<string>();\n    miClase.Dato = "Hola";\n    //...\n    MiClase<int> otraClase = new MiClase<string>();\n    otraClase.Dato = 123456;\n    Console.WriteLine(miClase.Dato);\n    Console.WriteLine(otraClase.Dato);\n}\n')),(0,r.kt)("p",null,"El uso de Generics est\xe1 presente en muchas clase de la Base Class Library. Por ejemplo, las clases gen\xe9ricas  ",(0,r.kt)("inlineCode",{parentName:"p"},"List")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"Dictionary")," incluidas en ",(0,r.kt)("em",{parentName:"p"},"System.Collections.Generic"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class List<T> \n    : IList<T>, System.Collections.IList, IReadOnlyList<T>\n{\n    private const int _defaultCapacity = 4;\n\n    private T[] _items;\n    [ContractPublicPropertyName("Count")]\n    private int _size;\n    private int _version;\n\n    static readonly T[] _emptyArray = new T[0];\n\n    public List()\n    {\n        _items = _emptyArray;\n    }\n\n    public void Add(T item)\n    {\n        if(_size == _items.Length)\n        {\n            EnsureCapacity(_size + 1);\n        }\n        _item[_size++] = item;\n        _version++;\n    }\n    //...\n}\n')),(0,r.kt)("h3",{id:"m\xe9todos-gen\xe9ricos"},"M\xe9todos gen\xe9ricos"),(0,r.kt)("p",null,"Podemos crear m\xe9todos que tanto sus par\xe1metros y/o su retorno sean gen\xe9ricos, en clases que no son gen\xe9ricas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Deposito\n{\n    private int capacidadMaxima;\n    private List<T> stock;\n\n    public bool Agregar(T a)\n    {\n        bool rta = false;\n\n        if(stock.Count < capacidadMaxima)\n        {\n            stock.Add(a);\n            rta = true;\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"restricciones-gen\xe9ricas-de-c"},"Restricciones gen\xe9ricas de C#"),(0,r.kt)("p",null,"C# le permite usar restricciones para restringir el c\xf3digo para especificar ciertos tipos al crear instancias de tipos gen\xe9ricos. Esto hace que se gener\xe9 un error en tiempo de compilaci\xf3n si intenta crear una instancia de un tipo gen\xe9rico utilizando un tipo que no est\xe1 permitido por las restricciones especificadas."),(0,r.kt)("p",null,"Para especificar una o m\xe1s restricciones en el tipo gen\xe9rico se usa clausula WHERE despu\xe9s del nombre del tipo gen\xe9rico."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Torneo<T> where T : Equipo\n{\n    private List<T> equipos;\n    private string nombre;\n    //...\n}\n")),(0,r.kt)("p",null,"La clase ",(0,r.kt)("inlineCode",{parentName:"p"},"Torneo")," s\xf3lo aceptara en su lista objetos del tipo ",(0,r.kt)("inlineCode",{parentName:"p"},"Equipo"),". "),(0,r.kt)("p",null,"Aplicando la misma sentencia podemos restringir nuestro par\xe1metro de tipo en los m\xe9todos: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static void SerializarJson<T>(string ruta, T obj) where T : class\n{\n    //...\n}\n")),(0,r.kt)("p",null,"Y tambi\xe9n podemos usar m\xe1s de una restricci\xf3n en el m\xe9todo o en la clase:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AgregarJugador<T,U>(T e, U j)\n    where T : Equipo\n    where U : Persona\n{\n    //...\n}\n")),(0,r.kt)("p",null,"Los tipos de sentencia que se pueden usar para las restricciones son las siguientes:  "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Restriccion"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Descripcion"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"where T : struct"),(0,r.kt)("td",{parentName:"tr",align:"center"},"El argumento de tipo debe ser un tipo de valor")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"where T : class"),(0,r.kt)("td",{parentName:"tr",align:"center"},"El argumento de tipo debe ser un tipo de referencia")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"where T : unmanaged"),(0,r.kt)("td",{parentName:"tr",align:"center"},"No puede ser tipo de refenrecia. Implica struct")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"where T : new()"),(0,r.kt)("td",{parentName:"tr",align:"center"},"El argumento de tipo dene tener un constructor p\xfablico sin parametros.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"where T : ",(0,r.kt)("inlineCode",{parentName:"td"},"<nombre de la clase>")),(0,r.kt)("td",{parentName:"tr",align:"center"},"El argumento de tipo debe ser de la clase especificada o derivada")))))}d.isMDXComponent=!0}}]);